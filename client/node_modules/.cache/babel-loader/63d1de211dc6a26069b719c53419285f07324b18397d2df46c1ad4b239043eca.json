{"ast":null,"code":"// 3-state theme controller: 'auto' | 'light' | 'dark'\n// Applies a concrete theme to <html data-theme=\"light|dark\"> using CSS vars.\n\nconst MODE_KEY = \"themeMode\"; // persisted mode choice\n\nfunction systemPrefersLight() {\n  try {\n    return window.matchMedia && window.matchMedia(\"(prefers-color-scheme: light)\").matches;\n  } catch {\n    return false;\n  }\n}\nexport function getThemeMode() {\n  const saved = localStorage.getItem(MODE_KEY);\n  return saved === \"light\" || saved === \"dark\" || saved === \"auto\" ? saved : \"auto\";\n}\nexport function getAppliedThemeFromMode(mode) {\n  if (mode === \"light\") return \"light\";\n  if (mode === \"dark\") return \"dark\";\n  return systemPrefersLight() ? \"light\" : \"dark\"; // auto\n}\nexport function applyThemeMode(mode) {\n  const applied = getAppliedThemeFromMode(mode);\n  document.documentElement.setAttribute(\"data-theme\", applied);\n  localStorage.setItem(MODE_KEY, mode);\n  return {\n    mode,\n    applied\n  };\n}\n\n// Initialize on app start and keep Auto in sync with OS.\nexport function initTheme() {\n  const mode = getThemeMode();\n  const {\n    applied\n  } = applyThemeMode(mode);\n\n  // If user chose Auto, react to OS changes.\n  const mql = window.matchMedia ? window.matchMedia(\"(prefers-color-scheme: light)\") : null;\n  if (mql) {\n    var _mql$addEventListener;\n    const handler = () => {\n      if (getThemeMode() === \"auto\") applyThemeMode(\"auto\");\n    };\n    (_mql$addEventListener = mql.addEventListener) === null || _mql$addEventListener === void 0 ? void 0 : _mql$addEventListener.call(mql, \"change\", handler);\n    // No need to remove: app lifetime listeners are fine, but you can export an unsubscribe if desired\n  }\n  return {\n    mode,\n    applied\n  };\n}\nexport function setThemeMode(nextMode /* 'auto' | 'light' | 'dark' */) {\n  return applyThemeMode(nextMode); // returns { mode, applied }\n}","map":{"version":3,"names":["MODE_KEY","systemPrefersLight","window","matchMedia","matches","getThemeMode","saved","localStorage","getItem","getAppliedThemeFromMode","mode","applyThemeMode","applied","document","documentElement","setAttribute","setItem","initTheme","mql","_mql$addEventListener","handler","addEventListener","call","setThemeMode","nextMode"],"sources":["/Users/queen/Downloads/Budget Tracker/client/src/utils/theme.js"],"sourcesContent":["// 3-state theme controller: 'auto' | 'light' | 'dark'\n// Applies a concrete theme to <html data-theme=\"light|dark\"> using CSS vars.\n\nconst MODE_KEY = \"themeMode\"; // persisted mode choice\n\nfunction systemPrefersLight() {\n  try {\n    return (\n      window.matchMedia &&\n      window.matchMedia(\"(prefers-color-scheme: light)\").matches\n    );\n  } catch {\n    return false;\n  }\n}\n\nexport function getThemeMode() {\n  const saved = localStorage.getItem(MODE_KEY);\n  return saved === \"light\" || saved === \"dark\" || saved === \"auto\"\n    ? saved\n    : \"auto\";\n}\n\nexport function getAppliedThemeFromMode(mode) {\n  if (mode === \"light\") return \"light\";\n  if (mode === \"dark\") return \"dark\";\n  return systemPrefersLight() ? \"light\" : \"dark\"; // auto\n}\n\nexport function applyThemeMode(mode) {\n  const applied = getAppliedThemeFromMode(mode);\n  document.documentElement.setAttribute(\"data-theme\", applied);\n  localStorage.setItem(MODE_KEY, mode);\n  return { mode, applied };\n}\n\n// Initialize on app start and keep Auto in sync with OS.\nexport function initTheme() {\n  const mode = getThemeMode();\n  const { applied } = applyThemeMode(mode);\n\n  // If user chose Auto, react to OS changes.\n  const mql = window.matchMedia\n    ? window.matchMedia(\"(prefers-color-scheme: light)\")\n    : null;\n  if (mql) {\n    const handler = () => {\n      if (getThemeMode() === \"auto\") applyThemeMode(\"auto\");\n    };\n    mql.addEventListener?.(\"change\", handler);\n    // No need to remove: app lifetime listeners are fine, but you can export an unsubscribe if desired\n  }\n  return { mode, applied };\n}\n\nexport function setThemeMode(nextMode /* 'auto' | 'light' | 'dark' */) {\n  return applyThemeMode(nextMode); // returns { mode, applied }\n}\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,QAAQ,GAAG,WAAW,CAAC,CAAC;;AAE9B,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,IAAI;IACF,OACEC,MAAM,CAACC,UAAU,IACjBD,MAAM,CAACC,UAAU,CAAC,+BAA+B,CAAC,CAACC,OAAO;EAE9D,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF;AAEA,OAAO,SAASC,YAAYA,CAAA,EAAG;EAC7B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACR,QAAQ,CAAC;EAC5C,OAAOM,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,MAAM,GAC5DA,KAAK,GACL,MAAM;AACZ;AAEA,OAAO,SAASG,uBAAuBA,CAACC,IAAI,EAAE;EAC5C,IAAIA,IAAI,KAAK,OAAO,EAAE,OAAO,OAAO;EACpC,IAAIA,IAAI,KAAK,MAAM,EAAE,OAAO,MAAM;EAClC,OAAOT,kBAAkB,CAAC,CAAC,GAAG,OAAO,GAAG,MAAM,CAAC,CAAC;AAClD;AAEA,OAAO,SAASU,cAAcA,CAACD,IAAI,EAAE;EACnC,MAAME,OAAO,GAAGH,uBAAuB,CAACC,IAAI,CAAC;EAC7CG,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEH,OAAO,CAAC;EAC5DL,YAAY,CAACS,OAAO,CAAChB,QAAQ,EAAEU,IAAI,CAAC;EACpC,OAAO;IAAEA,IAAI;IAAEE;EAAQ,CAAC;AAC1B;;AAEA;AACA,OAAO,SAASK,SAASA,CAAA,EAAG;EAC1B,MAAMP,IAAI,GAAGL,YAAY,CAAC,CAAC;EAC3B,MAAM;IAAEO;EAAQ,CAAC,GAAGD,cAAc,CAACD,IAAI,CAAC;;EAExC;EACA,MAAMQ,GAAG,GAAGhB,MAAM,CAACC,UAAU,GACzBD,MAAM,CAACC,UAAU,CAAC,+BAA+B,CAAC,GAClD,IAAI;EACR,IAAIe,GAAG,EAAE;IAAA,IAAAC,qBAAA;IACP,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAIf,YAAY,CAAC,CAAC,KAAK,MAAM,EAAEM,cAAc,CAAC,MAAM,CAAC;IACvD,CAAC;IACD,CAAAQ,qBAAA,GAAAD,GAAG,CAACG,gBAAgB,cAAAF,qBAAA,uBAApBA,qBAAA,CAAAG,IAAA,CAAAJ,GAAG,EAAoB,QAAQ,EAAEE,OAAO,CAAC;IACzC;EACF;EACA,OAAO;IAAEV,IAAI;IAAEE;EAAQ,CAAC;AAC1B;AAEA,OAAO,SAASW,YAAYA,CAACC,QAAQ,CAAC,iCAAiC;EACrE,OAAOb,cAAc,CAACa,QAAQ,CAAC,CAAC,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}