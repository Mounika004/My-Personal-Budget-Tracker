{"ast":null,"code":"// Compute balances and chart data from raw expenses\n// Rules:\n// - Per-friend balances are pairwise: each participant owes payer (amount / participants.length)\n// - \"Transfers\" category does NOT count toward monthly spend\n// - \"Monthly spend (your share)\" sums only YOUR share for expenses that include you\n\nfunction participantsOf(e) {\n  let arr = [];\n  if (e.splitWith) {\n    arr = String(e.splitWith).split(/[,\\s]+/).filter(Boolean);\n  } else {\n    arr = [e.paidBy];\n    if (e.paidTo) arr = arr.concat(String(e.paidTo).split(/[,\\s]+/).filter(Boolean));\n  }\n  const uniq = Array.from(new Set(arr.map(s => s.trim()))).filter(Boolean);\n  // always include payer\n  if (e.paidBy && !uniq.includes(e.paidBy)) uniq.push(e.paidBy);\n  return uniq;\n}\nfunction sameMonth(d, m) {\n  try {\n    const dd = new Date(d);\n    return dd.getMonth() === m;\n  } catch {\n    return false;\n  }\n}\nexport function formatCurrency(v) {\n  const n = Number(v || 0);\n  return new Intl.NumberFormat(\"en-IN\", {\n    style: \"currency\",\n    currency: \"INR\",\n    maximumFractionDigits: 0\n  }).format(n);\n}\nexport function timeAgo(_d) {\n  return \"\";\n} // timestamps removed per request\n\nexport function computeFromExpenses(currentEmail, expenses = [], opts = {}) {\n  const {\n    monthFilter = new Date().getMonth(),\n    categoryFilter = null\n  } = opts;\n  const list = Array.isArray(expenses) ? expenses : [];\n\n  // ---- pairwise friend balances relative to current user ----\n  const friendMap = new Map(); // email -> net (+ means they owe me)\n  let youOwe = 0,\n    owedToMe = 0;\n  list.forEach(e => {\n    const parts = participantsOf(e);\n    const amt = Number(e.amount || 0);\n    if (!amt || !parts.length) return;\n    const share = amt / parts.length;\n    if (!currentEmail) return;\n    if (e.paidBy === currentEmail) {\n      parts.forEach(p => {\n        if (p === currentEmail) return;\n        const v = (friendMap.get(p) || 0) + share;\n        friendMap.set(p, v);\n      });\n    } else if (parts.includes(currentEmail)) {\n      const v = (friendMap.get(e.paidBy) || 0) - share;\n      friendMap.set(e.paidBy, v);\n    }\n  });\n  const perFriend = Array.from(friendMap.entries()).map(([friend, value]) => ({\n    friend,\n    value\n  })).sort((a, b) => Math.abs(b.value) - Math.abs(a.value));\n  perFriend.forEach(x => {\n    if (x.value > 0) owedToMe += x.value;\n    if (x.value < 0) youOwe += Math.abs(x.value);\n  });\n\n  // ---- recent (filtered) ----\n  const filtered = list.filter(e => sameMonth(e.date, monthFilter) && (!categoryFilter || e.category === categoryFilter));\n  const recent = [...filtered].sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 20);\n\n  // ---- monthly chart (your share, exclude Transfers) ----\n  const chartMap = new Map(); // category -> amount (your share)\n  let chartTotal = 0;\n  filtered.forEach(e => {\n    if (String(e.category).toLowerCase() === \"transfers\") return;\n    const parts = participantsOf(e);\n    if (!currentEmail || !parts.includes(currentEmail)) return;\n    const share = Number(e.amount || 0) / parts.length;\n    const key = e.category || \"Other\";\n    chartMap.set(key, (chartMap.get(key) || 0) + share);\n    chartTotal += share;\n  });\n  const chart = {\n    total: Math.round(chartTotal),\n    data: Array.from(chartMap.entries()).map(([category, amount]) => ({\n      category,\n      amount: Math.round(amount)\n    })).sort((a, b) => b.amount - a.amount)\n  };\n  return {\n    totals: {\n      youOwe: Math.round(youOwe),\n      owedToMe: Math.round(owedToMe),\n      totalBalance: Math.round(owedToMe - youOwe)\n    },\n    recent,\n    chart,\n    perFriend\n  };\n}","map":{"version":3,"names":["participantsOf","e","arr","splitWith","String","split","filter","Boolean","paidBy","paidTo","concat","uniq","Array","from","Set","map","s","trim","includes","push","sameMonth","d","m","dd","Date","getMonth","formatCurrency","v","n","Number","Intl","NumberFormat","style","currency","maximumFractionDigits","format","timeAgo","_d","computeFromExpenses","currentEmail","expenses","opts","monthFilter","categoryFilter","list","isArray","friendMap","Map","youOwe","owedToMe","forEach","parts","amt","amount","length","share","p","get","set","perFriend","entries","friend","value","sort","a","b","Math","abs","x","filtered","date","category","recent","slice","chartMap","chartTotal","toLowerCase","key","chart","total","round","data","totals","totalBalance"],"sources":["/Users/queen/Downloads/Budget Tracker/client/src/utils/finance.js"],"sourcesContent":["// Compute balances and chart data from raw expenses\n// Rules:\n// - Per-friend balances are pairwise: each participant owes payer (amount / participants.length)\n// - \"Transfers\" category does NOT count toward monthly spend\n// - \"Monthly spend (your share)\" sums only YOUR share for expenses that include you\n\nfunction participantsOf(e) {\n  let arr = [];\n  if (e.splitWith) {\n    arr = String(e.splitWith)\n      .split(/[,\\s]+/)\n      .filter(Boolean);\n  } else {\n    arr = [e.paidBy];\n    if (e.paidTo)\n      arr = arr.concat(\n        String(e.paidTo)\n          .split(/[,\\s]+/)\n          .filter(Boolean)\n      );\n  }\n  const uniq = Array.from(new Set(arr.map((s) => s.trim()))).filter(Boolean);\n  // always include payer\n  if (e.paidBy && !uniq.includes(e.paidBy)) uniq.push(e.paidBy);\n  return uniq;\n}\n\nfunction sameMonth(d, m) {\n  try {\n    const dd = new Date(d);\n    return dd.getMonth() === m;\n  } catch {\n    return false;\n  }\n}\n\nexport function formatCurrency(v) {\n  const n = Number(v || 0);\n  return new Intl.NumberFormat(\"en-IN\", {\n    style: \"currency\",\n    currency: \"INR\",\n    maximumFractionDigits: 0,\n  }).format(n);\n}\n\nexport function timeAgo(_d) {\n  return \"\";\n} // timestamps removed per request\n\nexport function computeFromExpenses(currentEmail, expenses = [], opts = {}) {\n  const { monthFilter = new Date().getMonth(), categoryFilter = null } = opts;\n  const list = Array.isArray(expenses) ? expenses : [];\n\n  // ---- pairwise friend balances relative to current user ----\n  const friendMap = new Map(); // email -> net (+ means they owe me)\n  let youOwe = 0,\n    owedToMe = 0;\n\n  list.forEach((e) => {\n    const parts = participantsOf(e);\n    const amt = Number(e.amount || 0);\n    if (!amt || !parts.length) return;\n    const share = amt / parts.length;\n\n    if (!currentEmail) return;\n\n    if (e.paidBy === currentEmail) {\n      parts.forEach((p) => {\n        if (p === currentEmail) return;\n        const v = (friendMap.get(p) || 0) + share;\n        friendMap.set(p, v);\n      });\n    } else if (parts.includes(currentEmail)) {\n      const v = (friendMap.get(e.paidBy) || 0) - share;\n      friendMap.set(e.paidBy, v);\n    }\n  });\n\n  const perFriend = Array.from(friendMap.entries())\n    .map(([friend, value]) => ({ friend, value }))\n    .sort((a, b) => Math.abs(b.value) - Math.abs(a.value));\n\n  perFriend.forEach((x) => {\n    if (x.value > 0) owedToMe += x.value;\n    if (x.value < 0) youOwe += Math.abs(x.value);\n  });\n\n  // ---- recent (filtered) ----\n  const filtered = list.filter(\n    (e) =>\n      sameMonth(e.date, monthFilter) &&\n      (!categoryFilter || e.category === categoryFilter)\n  );\n  const recent = [...filtered]\n    .sort((a, b) => new Date(b.date) - new Date(a.date))\n    .slice(0, 20);\n\n  // ---- monthly chart (your share, exclude Transfers) ----\n  const chartMap = new Map(); // category -> amount (your share)\n  let chartTotal = 0;\n\n  filtered.forEach((e) => {\n    if (String(e.category).toLowerCase() === \"transfers\") return;\n    const parts = participantsOf(e);\n    if (!currentEmail || !parts.includes(currentEmail)) return;\n    const share = Number(e.amount || 0) / parts.length;\n    const key = e.category || \"Other\";\n    chartMap.set(key, (chartMap.get(key) || 0) + share);\n    chartTotal += share;\n  });\n\n  const chart = {\n    total: Math.round(chartTotal),\n    data: Array.from(chartMap.entries())\n      .map(([category, amount]) => ({ category, amount: Math.round(amount) }))\n      .sort((a, b) => b.amount - a.amount),\n  };\n\n  return {\n    totals: {\n      youOwe: Math.round(youOwe),\n      owedToMe: Math.round(owedToMe),\n      totalBalance: Math.round(owedToMe - youOwe),\n    },\n    recent,\n    chart,\n    perFriend,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}