{"ast":null,"code":"// client/src/data/meApi.js\nimport instance from \"../utils/AxiosConfig\";\nimport { pushToast } from \"../redux/reducers/uiReducer\";\nimport { store } from \"../redux/store\";\nimport { computeFromExpenses } from \"../utils/finance\";\nimport { setFriendLabel, getFriendLabel } from \"../utils/friends\";\nconst d = action => store.dispatch(action);\n\n/** Load current user, expenses, and categories into Redux */\nexport async function loadMe() {\n  d({\n    type: \"ME_LOADING\"\n  });\n  try {\n    const {\n      data\n    } = await instance.get(\"/user/me\");\n    d({\n      type: \"ME_SET\",\n      payload: {\n        email: data.email,\n        username: data.username,\n        expenses: data.expensis || [],\n        // API returns `expensis`\n        friends: data.friends || []\n      }\n    });\n\n    // Load categories (optional endpoint)\n    try {\n      var _cats$data;\n      const cats = await instance.get(\"/user/categories\");\n      if (cats !== null && cats !== void 0 && (_cats$data = cats.data) !== null && _cats$data !== void 0 && _cats$data.categories) {\n        d({\n          type: \"ME_SET_CATEGORIES\",\n          payload: cats.data.categories\n        });\n      }\n    } catch {\n      /* categories are optional */\n    }\n  } catch (e) {\n    var _e$response, _e$response$data;\n    d({\n      type: \"ME_ERROR\",\n      error: (e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.msg) || \"Load error\"\n    });\n    d(pushToast(\"Could not load your data\", \"error\"));\n  }\n}\n\n/** Add a friend by email; optionally store a friendly display name locally */\nexport async function addFriend(friendEmail, friendName) {\n  try {\n    await instance.post(\"/user/friend/add\", {\n      friendEmail\n    });\n    if (friendName) setFriendLabel(friendEmail, friendName);\n    d(pushToast(\"Friend added\", \"success\"));\n    await loadMe(); // ensure friend appears immediately\n  } catch (e) {\n    var _e$response2, _e$response2$data;\n    d(pushToast((e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.msg) || \"Add friend failed\", \"error\"));\n    throw e;\n  }\n}\n\n/** Add a regular expense */\nexport async function addExpense(payload) {\n  try {\n    const {\n      data\n    } = await instance.post(\"/user/expense/add\", payload);\n    d({\n      type: \"ME_SET_EXPENSES\",\n      payload: data.expensis || []\n    });\n    d(pushToast(\"Expense added\", \"success\"));\n  } catch (e) {\n    var _e$response3, _e$response3$data;\n    d(pushToast((e === null || e === void 0 ? void 0 : (_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.msg) || \"Add expense failed\", \"error\"));\n    throw e;\n  }\n}\n\n/** Edit an expense by id */\nexport async function editExpense(id, patch) {\n  try {\n    const {\n      data\n    } = await instance.patch(`/user/expense/${id}`, patch);\n    d({\n      type: \"ME_SET_EXPENSES\",\n      payload: data.expensis || []\n    });\n    d(pushToast(\"Expense updated\", \"success\"));\n  } catch (e) {\n    var _e$response4, _e$response4$data;\n    d(pushToast((e === null || e === void 0 ? void 0 : (_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.msg) || \"Update failed\", \"error\"));\n    throw e;\n  }\n}\n\n/** Delete an expense by id */\nexport async function deleteExpense(id) {\n  try {\n    const {\n      data\n    } = await instance.delete(`/user/expense/${id}`);\n    d({\n      type: \"ME_SET_EXPENSES\",\n      payload: data.expensis || []\n    });\n    d(pushToast(\"Expense deleted\", \"success\"));\n  } catch (e) {\n    var _e$response5, _e$response5$data;\n    d(pushToast((e === null || e === void 0 ? void 0 : (_e$response5 = e.response) === null || _e$response5 === void 0 ? void 0 : (_e$response5$data = _e$response5.data) === null || _e$response5$data === void 0 ? void 0 : _e$response5$data.msg) || \"Delete failed\", \"error\"));\n    throw e;\n  }\n}\n\n/**\n * Record a settlement with a friend.\n *\n * @param {string} friendEmail - Friend's email (ID on the server)\n * @param {number} amount      - NET amount to settle (e.g., ₹200)\n * @param {'they_pay'|'i_pay'} [direction] - Optional override of who pays.\n *\n * How it works:\n * - We determine the current balance with that friend (positive: they owe you; negative: you owe them).\n * - The payer is the debtor (unless `direction` overrides).\n * - We post a \"Transfers\" expense split equally between you two with amount = 2 × net,\n *   which changes the pairwise balance by exactly the `amount` you specified.\n * - The description is saved as \"Settlement with <Friend Name>\" for nicer Recent Activity.\n */\nexport async function settleWithFriend(friendEmail, amount, direction) {\n  var _state$me$me, _perFriend$find;\n  const state = store.getState();\n  const meEmail = (_state$me$me = state.me.me) === null || _state$me$me === void 0 ? void 0 : _state$me$me.email;\n  const expenses = state.me.expenses || [];\n  const {\n    perFriend\n  } = computeFromExpenses(meEmail, expenses);\n  const currentBal = ((_perFriend$find = perFriend.find(p => p.friend === friendEmail)) === null || _perFriend$find === void 0 ? void 0 : _perFriend$find.value) || 0; // + => they owe me\n  const net = Number(amount || Math.abs(currentBal) || 0);\n  if (!net || !meEmail || !friendEmail) {\n    d(pushToast(\"Nothing to settle\", \"warning\"));\n    return;\n  }\n\n  // Decide payer: by override or inferred from current balance\n  let payer;\n  if (direction === \"they_pay\") payer = friendEmail;else if (direction === \"i_pay\") payer = meEmail;else payer = currentBal > 0 ? friendEmail : meEmail; // debtor pays\n\n  // Nice label in description\n  const friendLabel = getFriendLabel(friendEmail) || String(friendEmail).split(\"@\")[0];\n  const payload = {\n    description: `Settlement with ${friendLabel}`,\n    amount: net * 2,\n    // equal split nets to `net`\n    paidBy: payer,\n    splitWith: `${meEmail},${friendEmail}`,\n    category: \"Transfers\",\n    date: new Date().toISOString()\n  };\n  try {\n    const {\n      data\n    } = await instance.post(\"/user/expense/add\", payload);\n    d({\n      type: \"ME_SET_EXPENSES\",\n      payload: data.expensis || []\n    });\n    d(pushToast(\"Settlement recorded\", \"success\"));\n  } catch (e) {\n    var _e$response6, _e$response6$data;\n    d(pushToast((e === null || e === void 0 ? void 0 : (_e$response6 = e.response) === null || _e$response6 === void 0 ? void 0 : (_e$response6$data = _e$response6.data) === null || _e$response6$data === void 0 ? void 0 : _e$response6$data.msg) || \"Settlement failed\", \"error\"));\n    throw e;\n  }\n}\n\n/** Category management */\nexport async function addCategory(name, color) {\n  try {\n    const {\n      data\n    } = await instance.post(\"/user/category\", {\n      name,\n      color\n    });\n    d({\n      type: \"ME_SET_CATEGORIES\",\n      payload: data.categories || []\n    });\n    d(pushToast(\"Category added\", \"success\"));\n  } catch (e) {\n    var _e$response7, _e$response7$data;\n    d(pushToast((e === null || e === void 0 ? void 0 : (_e$response7 = e.response) === null || _e$response7 === void 0 ? void 0 : (_e$response7$data = _e$response7.data) === null || _e$response7$data === void 0 ? void 0 : _e$response7$data.msg) || \"Add category failed\", \"error\"));\n    throw e;\n  }\n}\nexport async function renameCategory(oldName, newName, color) {\n  try {\n    const {\n      data\n    } = await instance.patch(`/user/category/${encodeURIComponent(oldName)}`, {\n      newName,\n      color\n    });\n    if (data.expensis) {\n      d({\n        type: \"ME_SET_EXPENSES\",\n        payload: data.expensis\n      });\n    }\n    if (data.categories) {\n      d({\n        type: \"ME_SET_CATEGORIES\",\n        payload: data.categories\n      });\n    }\n    d(pushToast(\"Category updated\", \"success\"));\n  } catch (e) {\n    var _e$response8, _e$response8$data;\n    d(pushToast((e === null || e === void 0 ? void 0 : (_e$response8 = e.response) === null || _e$response8 === void 0 ? void 0 : (_e$response8$data = _e$response8.data) === null || _e$response8$data === void 0 ? void 0 : _e$response8$data.msg) || \"Update category failed\", \"error\"));\n    throw e;\n  }\n}","map":{"version":3,"names":["instance","pushToast","store","computeFromExpenses","setFriendLabel","getFriendLabel","d","action","dispatch","loadMe","type","data","get","payload","email","username","expenses","expensis","friends","_cats$data","cats","categories","e","_e$response","_e$response$data","error","response","msg","addFriend","friendEmail","friendName","post","_e$response2","_e$response2$data","addExpense","_e$response3","_e$response3$data","editExpense","id","patch","_e$response4","_e$response4$data","deleteExpense","delete","_e$response5","_e$response5$data","settleWithFriend","amount","direction","_state$me$me","_perFriend$find","state","getState","meEmail","me","perFriend","currentBal","find","p","friend","value","net","Number","Math","abs","payer","friendLabel","String","split","description","paidBy","splitWith","category","date","Date","toISOString","_e$response6","_e$response6$data","addCategory","name","color","_e$response7","_e$response7$data","renameCategory","oldName","newName","encodeURIComponent","_e$response8","_e$response8$data"],"sources":["/Users/queen/Downloads/Budget Tracker/client/src/data/meApi.js"],"sourcesContent":["// client/src/data/meApi.js\nimport instance from \"../utils/AxiosConfig\";\nimport { pushToast } from \"../redux/reducers/uiReducer\";\nimport { store } from \"../redux/store\";\nimport { computeFromExpenses } from \"../utils/finance\";\nimport { setFriendLabel, getFriendLabel } from \"../utils/friends\";\n\nconst d = (action) => store.dispatch(action);\n\n/** Load current user, expenses, and categories into Redux */\nexport async function loadMe() {\n  d({ type: \"ME_LOADING\" });\n  try {\n    const { data } = await instance.get(\"/user/me\");\n    d({\n      type: \"ME_SET\",\n      payload: {\n        email: data.email,\n        username: data.username,\n        expenses: data.expensis || [], // API returns `expensis`\n        friends: data.friends || [],\n      },\n    });\n\n    // Load categories (optional endpoint)\n    try {\n      const cats = await instance.get(\"/user/categories\");\n      if (cats?.data?.categories) {\n        d({ type: \"ME_SET_CATEGORIES\", payload: cats.data.categories });\n      }\n    } catch {\n      /* categories are optional */\n    }\n  } catch (e) {\n    d({ type: \"ME_ERROR\", error: e?.response?.data?.msg || \"Load error\" });\n    d(pushToast(\"Could not load your data\", \"error\"));\n  }\n}\n\n/** Add a friend by email; optionally store a friendly display name locally */\nexport async function addFriend(friendEmail, friendName) {\n  try {\n    await instance.post(\"/user/friend/add\", { friendEmail });\n    if (friendName) setFriendLabel(friendEmail, friendName);\n    d(pushToast(\"Friend added\", \"success\"));\n    await loadMe(); // ensure friend appears immediately\n  } catch (e) {\n    d(pushToast(e?.response?.data?.msg || \"Add friend failed\", \"error\"));\n    throw e;\n  }\n}\n\n/** Add a regular expense */\nexport async function addExpense(payload) {\n  try {\n    const { data } = await instance.post(\"/user/expense/add\", payload);\n    d({ type: \"ME_SET_EXPENSES\", payload: data.expensis || [] });\n    d(pushToast(\"Expense added\", \"success\"));\n  } catch (e) {\n    d(pushToast(e?.response?.data?.msg || \"Add expense failed\", \"error\"));\n    throw e;\n  }\n}\n\n/** Edit an expense by id */\nexport async function editExpense(id, patch) {\n  try {\n    const { data } = await instance.patch(`/user/expense/${id}`, patch);\n    d({ type: \"ME_SET_EXPENSES\", payload: data.expensis || [] });\n    d(pushToast(\"Expense updated\", \"success\"));\n  } catch (e) {\n    d(pushToast(e?.response?.data?.msg || \"Update failed\", \"error\"));\n    throw e;\n  }\n}\n\n/** Delete an expense by id */\nexport async function deleteExpense(id) {\n  try {\n    const { data } = await instance.delete(`/user/expense/${id}`);\n    d({ type: \"ME_SET_EXPENSES\", payload: data.expensis || [] });\n    d(pushToast(\"Expense deleted\", \"success\"));\n  } catch (e) {\n    d(pushToast(e?.response?.data?.msg || \"Delete failed\", \"error\"));\n    throw e;\n  }\n}\n\n/**\n * Record a settlement with a friend.\n *\n * @param {string} friendEmail - Friend's email (ID on the server)\n * @param {number} amount      - NET amount to settle (e.g., ₹200)\n * @param {'they_pay'|'i_pay'} [direction] - Optional override of who pays.\n *\n * How it works:\n * - We determine the current balance with that friend (positive: they owe you; negative: you owe them).\n * - The payer is the debtor (unless `direction` overrides).\n * - We post a \"Transfers\" expense split equally between you two with amount = 2 × net,\n *   which changes the pairwise balance by exactly the `amount` you specified.\n * - The description is saved as \"Settlement with <Friend Name>\" for nicer Recent Activity.\n */\nexport async function settleWithFriend(friendEmail, amount, direction) {\n  const state = store.getState();\n  const meEmail = state.me.me?.email;\n  const expenses = state.me.expenses || [];\n  const { perFriend } = computeFromExpenses(meEmail, expenses);\n\n  const currentBal =\n    perFriend.find((p) => p.friend === friendEmail)?.value || 0; // + => they owe me\n  const net = Number(amount || Math.abs(currentBal) || 0);\n\n  if (!net || !meEmail || !friendEmail) {\n    d(pushToast(\"Nothing to settle\", \"warning\"));\n    return;\n  }\n\n  // Decide payer: by override or inferred from current balance\n  let payer;\n  if (direction === \"they_pay\") payer = friendEmail;\n  else if (direction === \"i_pay\") payer = meEmail;\n  else payer = currentBal > 0 ? friendEmail : meEmail; // debtor pays\n\n  // Nice label in description\n  const friendLabel =\n    getFriendLabel(friendEmail) || String(friendEmail).split(\"@\")[0];\n\n  const payload = {\n    description: `Settlement with ${friendLabel}`,\n    amount: net * 2, // equal split nets to `net`\n    paidBy: payer,\n    splitWith: `${meEmail},${friendEmail}`,\n    category: \"Transfers\",\n    date: new Date().toISOString(),\n  };\n\n  try {\n    const { data } = await instance.post(\"/user/expense/add\", payload);\n    d({ type: \"ME_SET_EXPENSES\", payload: data.expensis || [] });\n    d(pushToast(\"Settlement recorded\", \"success\"));\n  } catch (e) {\n    d(pushToast(e?.response?.data?.msg || \"Settlement failed\", \"error\"));\n    throw e;\n  }\n}\n\n/** Category management */\nexport async function addCategory(name, color) {\n  try {\n    const { data } = await instance.post(\"/user/category\", { name, color });\n    d({ type: \"ME_SET_CATEGORIES\", payload: data.categories || [] });\n    d(pushToast(\"Category added\", \"success\"));\n  } catch (e) {\n    d(pushToast(e?.response?.data?.msg || \"Add category failed\", \"error\"));\n    throw e;\n  }\n}\n\nexport async function renameCategory(oldName, newName, color) {\n  try {\n    const { data } = await instance.patch(\n      `/user/category/${encodeURIComponent(oldName)}`,\n      { newName, color }\n    );\n    if (data.expensis) {\n      d({ type: \"ME_SET_EXPENSES\", payload: data.expensis });\n    }\n    if (data.categories) {\n      d({ type: \"ME_SET_CATEGORIES\", payload: data.categories });\n    }\n    d(pushToast(\"Category updated\", \"success\"));\n  } catch (e) {\n    d(pushToast(e?.response?.data?.msg || \"Update category failed\", \"error\"));\n    throw e;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}